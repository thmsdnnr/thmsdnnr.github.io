<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>stack on full-stack overflow ðŸ¥ž</title>
		<link>https://thmsdnnr.com/tags/stack/</link>
		<description>Recent content in stack on thmsdnnr.com</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>Â© 2017-2020 thomas danner // Vitae theme for Hugo</copyright>
		<lastBuildDate>Wed, 07 Feb 2018 06:56:04 +0000</lastBuildDate>
		
		<atom:link href="https://thmsdnnr.com/tags/stack/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>AVL Trees Part 2: Insertions</title>
			<link>https://thmsdnnr.com/post/avl-trees-part-2-insertions/</link>
			<pubDate>Wed, 07 Feb 2018 06:56:04 +0000</pubDate>
			
			<guid>https://thmsdnnr.com/post/avl-trees-part-2-insertions/</guid>
			<description>
				
				Taking an in-depth look at node rebalancing after insertions in AVL trees.
				
			</description>
		</item>
		<item>
			<title>AVL Trees Part 1: Balanced Binary Search and Rotations</title>
			<link>https://thmsdnnr.com/post/avl-trees-part-1-balanced-binary-search-and-rotations/</link>
			<pubDate>Mon, 05 Feb 2018 06:56:04 +0000</pubDate>
			
			<guid>https://thmsdnnr.com/post/avl-trees-part-1-balanced-binary-search-and-rotations/</guid>
			<description>
				
				AVL trees are self-balancing binary trees that avoid worst-case O(n) performance given increasing or decreasing inputs.
				
			</description>
		</item>
		<item>
			<title>Binary Tree Application: Binary Space Partitioning</title>
			<link>https://thmsdnnr.com/post/binary-tree-application-binary-space-partitioning/</link>
			<pubDate>Sat, 03 Feb 2018 06:56:04 +0000</pubDate>
			
			<guid>https://thmsdnnr.com/post/binary-tree-application-binary-space-partitioning/</guid>
			<description>
				
				Binary space partitioning recursively subdivides a space. It is an application of binary trees and often used for procedurally generated game levels or computational art.
				
			</description>
		</item>
		<item>
			<title>Binary Search Trees: Handling Deletion</title>
			<link>https://thmsdnnr.com/post/binary-search-trees-handling-deletion/</link>
			<pubDate>Fri, 02 Feb 2018 06:56:04 +0000</pubDate>
			
			<guid>https://thmsdnnr.com/post/binary-search-trees-handling-deletion/</guid>
			<description>
				
				Handling deletion in Binary Search Trees for nodes with zero, one, and two children.
				
			</description>
		</item>
		<item>
			<title>Intro to Binary Search Trees</title>
			<link>https://thmsdnnr.com/post/intro-to-binary-search-trees/</link>
			<pubDate>Thu, 01 Feb 2018 06:56:04 +0000</pubDate>
			
			<guid>https://thmsdnnr.com/post/intro-to-binary-search-trees/</guid>
			<description>
				
				Binary Search Trees are are a data structure allowing O(log(N)) lookup of entries. We implement insertion, traversal, and search methods for Binary Search Trees.
				
			</description>
		</item>
		<item>
			<title>Intro to Linked Lists</title>
			<link>https://thmsdnnr.com/post/intro-to-linked-lists/</link>
			<pubDate>Wed, 31 Jan 2018 06:56:04 +0000</pubDate>
			
			<guid>https://thmsdnnr.com/post/intro-to-linked-lists/</guid>
			<description>
				
				The Singly Linked List is a classic data structure. We implement length, insert, remove, and search methods, and compare the Linked List&#39;s big-O complexity to arrays.
				
			</description>
		</item>
		<item>
			<title>Stacks, Queues, and Matching Brackets</title>
			<link>https://thmsdnnr.com/post/stacks-queues-and-matching-brackets/</link>
			<pubDate>Tue, 30 Jan 2018 08:56:04 +0000</pubDate>
			
			<guid>https://thmsdnnr.com/post/stacks-queues-and-matching-brackets/</guid>
			<description>
				
				Introducing the Stack and Queue data structures, using the Stack to implement a Code Linter to check for mismatched open and closing brackets.
				
			</description>
		</item>
		
	</channel>
</rss>
